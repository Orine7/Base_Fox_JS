{"version":3,"file":"main.js","mappings":"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","sources":["webpack://-/./apps/backend/src/app/app.controller.ts","webpack://-/./apps/backend/src/app/app.module.ts","webpack://-/./apps/backend/src/app/app.service.ts","webpack://-/./apps/backend/src/app/auth/auth.module.ts","webpack://-/./apps/backend/src/app/auth/auth.service.ts","webpack://-/./apps/backend/src/app/auth/strategies/local.strategy.ts","webpack://-/./apps/backend/src/app/users/dto/create-user.dto.ts","webpack://-/./apps/backend/src/app/users/dto/update-user.dto.ts","webpack://-/./apps/backend/src/app/users/entities/user.entity.ts","webpack://-/./apps/backend/src/app/users/users.controller.ts","webpack://-/./apps/backend/src/app/users/users.module.ts","webpack://-/./apps/backend/src/app/users/users.service.ts","webpack://-/external commonjs \"@nestjs/common\"","webpack://-/external commonjs \"@nestjs/config\"","webpack://-/external commonjs \"@nestjs/core\"","webpack://-/external commonjs \"@nestjs/mapped-types\"","webpack://-/external commonjs \"@nestjs/passport\"","webpack://-/external commonjs \"@nestjs/typeorm\"","webpack://-/external commonjs \"bcrypt\"","webpack://-/external commonjs \"class-validator\"","webpack://-/external commonjs \"passport-local\"","webpack://-/external commonjs \"tslib\"","webpack://-/external commonjs \"typeorm\"","webpack://-/webpack/bootstrap","webpack://-/./apps/backend/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n","import { Module } from '@nestjs/common'\nimport { ConfigModule, ConfigService } from '@nestjs/config'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\nimport { AuthModule } from './auth/auth.module'\nimport { UserEntity } from './users/entities/user.entity'\nimport { UsersModule } from './users/users.module'\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('DATABASE_HOST'),\n        port: configService.get('DATABASE_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        //TODO: add a more generic way to make this work\n        entities: [UserEntity],\n        synchronize: true,\n        retryAttempts: 3,\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { LocalStrategy } from './strategies/local.strategy';\n\n@Module({\n  imports: [UsersModule, PassportModule],\n  providers: [AuthService, LocalStrategy],\n})\nexport class AuthModule {}\n","import { Injectable } from '@nestjs/common'\nimport { compare } from 'bcrypt'\nimport { UsersService } from '../users/users.service'\n\n@Injectable()\nexport class AuthService {\n  constructor(private usersService: UsersService) {}\n\n  async validateUser(\n    email: string,\n    pass: string,\n  ): Promise<{ id: string; name: string; email: string } | null> {\n    const user = await this.usersService.findOneByEmail(email)\n    if (user && compare(pass, user.password)) {\n      const { password, ...result } = user\n      return result\n    }\n    return null\n  }\n}\n","import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise<any> {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n","import { IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  name: string;\n\n  @IsEmail()\n  email: string;\n\n  @IsNotEmpty()\n  password: string;\n}\n","import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n","import { hash } from 'bcrypt';\nimport { BeforeInsert, Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n\n  @BeforeInsert()\n  async encryptPassword() {\n    this.password = await hash(this.password, 8);\n  }\n}\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common'\nimport { AuthGuard } from '@nestjs/passport'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { UsersService } from './users.service'\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    const { password, ...result } = await this.usersService.create(\n      createUserDto,\n    )\n    console.log(result)\n    return result\n  }\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    //console.log(req)\n    return req.user\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.usersService.findOne(id)\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(+id, updateUserDto)\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.usersService.remove(+id)\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n","import { Injectable } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Repository } from 'typeorm'\nimport { CreateUserDto } from './dto/create-user.dto'\nimport { UpdateUserDto } from './dto/update-user.dto'\nimport { UserEntity } from './entities/user.entity'\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private userRepo: Repository<UserEntity>,\n  ) {}\n\n  async create(createUserDto: CreateUserDto): Promise<UserEntity> {\n    const newUser = this.userRepo.create(createUserDto)\n    return await this.userRepo.save(newUser)\n  }\n\n  async findOne(id: string) {\n    return await this.userRepo.findOne({ where: { id: id } })\n  }\n\n  async findOneByEmail(email: string) {\n    return await this.userRepo.findOne({\n      where: { email: email },\n      select: ['id', 'email', 'password'],\n    })\n  }\n\n  update(id: number, updateUserDto: UpdateUserDto) {\n    return `This action updates a #${id} user`\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} user`\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mapped-types\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-validator\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger, ValidationPipe } from '@nestjs/common'\nimport { NestFactory } from '@nestjs/core'\nimport { AppModule } from './app/app.module'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  const globalPrefix = 'api'\n  app.enableCors()\n  app.setGlobalPrefix(globalPrefix)\n  const port = process.env.PORT || 3333\n  app.useGlobalPipes(new ValidationPipe())\n  await app.listen(port)\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`,\n  )\n}\n\nbootstrap()\n"],"names":[],"sourceRoot":""}